/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è API
 * OpenAPI spec version: v1
 */
export interface Course {
    readonly id?: number;
    /**
     * @minLength 1
     * @maxLength 255
     */
    title_ru: string;
    /**
     * @minLength 1
     * @maxLength 255
     */
    title_kz: string;
    /** @minLength 1 */
    description_ru: string;
    /** @minLength 1 */
    description_kz: string;
    price: string;
    is_published?: boolean;
}

export interface Lesson {
    readonly id?: number;
    /**
     * @minLength 1
     * @maxLength 255
     */
    title_ru: string;
    /**
     * @minLength 1
     * @maxLength 255
     */
    title_kz: string;
    /** @minLength 1 */
    content_ru: string;
    /** @minLength 1 */
    content_kz: string;
    /** @nullable */
    readonly media_ru?: string | null;
    /** @nullable */
    readonly media_kz?: string | null;
    /**
     * @minimum 0
     * @maximum 9223372036854776000
     */
    order_num: number;
}

export type FinalTestQuestionsRu = { [key: string]: unknown };

export type FinalTestQuestionsKz = { [key: string]: unknown };

export interface FinalTest {
    readonly id?: number;
    questions_ru: FinalTestQuestionsRu;
    questions_kz: FinalTestQuestionsKz;
    readonly created_at?: string;
    course: number;
}

export type LessonTestQuestionsRu = { [key: string]: unknown };

export type LessonTestQuestionsKz = { [key: string]: unknown };

export interface LessonTest {
    readonly id?: number;
    questions_ru: LessonTestQuestionsRu;
    questions_kz: LessonTestQuestionsKz;
    readonly created_at?: string;
    lesson: number;
}

export interface CustomTokenObtainPair {
    /** @minLength 1 */
    phone_number: string;
    /** @minLength 1 */
    password: string;
}

export interface Payment {
    readonly id?: number;
    amount: string;
    /**
     * @minLength 1
     * @maxLength 10
     */
    status?: string;
    readonly created_at?: string;
    user: number;
    course: number;
}

export interface Certificate {
    readonly id?: number;
    readonly issued_at?: string;
    user: number;
    course: number;
}

export interface UserCourse {
    readonly id?: number;
    has_access?: boolean;
    readonly enrolled_at?: string;
    user: number;
    course: number;
}

export type FinalTestBody = FinalTest;

export type LessonBody = Lesson;

export type CourseBody = Course;

export type LessonTestBody = LessonTest;

export type PaymentBody = Payment;

/**
 * –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –≥–¥–µ –∫–ª—é—á - ID –≤–æ–ø—Ä–æ—Å–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
 */
export type FinalTestSubmitCreateBodyAnswers = { [key: string]: unknown };

export type FinalTestSubmitCreateBody = {
    /** Course id */
    course_id?: number;
    /** –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, –≥–¥–µ –∫–ª—é—á - ID –≤–æ–ø—Ä–æ—Å–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç */
    answers: FinalTestSubmitCreateBodyAnswers;
    /** –Ø–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru') */
    language?: string;
};

export type FinalTestSubmitCreate200 = {
    /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ */
    score?: number;
    /** –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª –ª–∏ –≤—ã–¥–∞–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç */
    certificate_issued?: boolean;
};

/**
 * –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–¥–µ –∫–ª—é—á - ID –≤–æ–ø—Ä–æ—Å–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
 */
export type LessonTestSubmitCreateBodyAnswers = { [key: string]: unknown };

export type LessonTestSubmitCreateBody = {
    /** Lesson test id */
    lesson_test_id?: number;
    /** –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–¥–µ –∫–ª—é—á - ID –≤–æ–ø—Ä–æ—Å–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç */
    answers: LessonTestSubmitCreateBodyAnswers;
    /** –Ø–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru') */
    language?: string;
};

export type LessonTestSubmitCreate200 = {
    /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ */
    score?: number;
};

export type PurchaseCourseCreateBody = {
    /** ID –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ */
    course_id: number;
};

export type PurchaseCourseCreate201 = {
    /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ */
    message?: string;
    /** ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã */
    payment_id?: number;
};

export type SendCodeCreateBody = {
    /** –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */
    phone_number: string;
};

export type VerifyCodeCreateBody = {
    /** –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */
    phone_number: string;
    /** –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS */
    code: string;
    /** –§–ò–û –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
    full_name?: string;
    /** –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
    password: string;
    /** –î–æ–ª–∂–Ω–æ—Å—Ç—å */
    position?: string;
    /** –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã */
    workplace?: string;
    /** –ò–ò–ù */
    iin?: string;
};

export type availableCoursesListResponse200 = {
    data: Course[]
    status: 200
}

export type availableCoursesListResponseComposite = availableCoursesListResponse200;

export type availableCoursesListResponse = availableCoursesListResponseComposite & {
    headers: Headers;
}

export const getAvailableCoursesListUrl = () => {




    return `/available-courses/`
}

export const availableCoursesList = async (options?: RequestInit): Promise<availableCoursesListResponse> => {

    const res = await fetch(getAvailableCoursesListUrl(),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: availableCoursesListResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as availableCoursesListResponse
}



export type courseLessonsListResponse200 = {
    data: Lesson[]
    status: 200
}

export type courseLessonsListResponseComposite = courseLessonsListResponse200;

export type courseLessonsListResponse = courseLessonsListResponseComposite & {
    headers: Headers;
}

export const getCourseLessonsListUrl = () => {




    return `/course-lessons/`
}

export const courseLessonsList = async (options?: RequestInit): Promise<courseLessonsListResponse> => {

    const res = await fetch(getCourseLessonsListUrl(),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: courseLessonsListResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as courseLessonsListResponse
}



/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
 */
export type courseListResponse200 = {
    data: Course[]
    status: 200
}

export type courseListResponse400 = {
    data: void
    status: 400
}

export type courseListResponseComposite = courseListResponse200 | courseListResponse400;

export type courseListResponse = courseListResponseComposite & {
    headers: Headers;
}

export const getCourseListUrl = () => {




    return `/course/`
}

export const courseList = async (options?: RequestInit): Promise<courseListResponse> => {

    const res = await fetch(getCourseListUrl(),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: courseListResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as courseListResponse
}



/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
 */
export type courseCreateResponse201 = {
    data: Course
    status: 201
}

export type courseCreateResponse400 = {
    data: void
    status: 400
}

export type courseCreateResponseComposite = courseCreateResponse201 | courseCreateResponse400;

export type courseCreateResponse = courseCreateResponseComposite & {
    headers: Headers;
}

export const getCourseCreateUrl = () => {




    return `/course/`
}

export const courseCreate = async (courseBody: CourseBody, options?: RequestInit): Promise<courseCreateResponse> => {

    const res = await fetch(getCourseCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                courseBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: courseCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as courseCreateResponse
}



/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –ø–æ ID
 */
export type courseReadResponse200 = {
    data: Course
    status: 200
}

export type courseReadResponse404 = {
    data: void
    status: 404
}

export type courseReadResponseComposite = courseReadResponse200 | courseReadResponse404;

export type courseReadResponse = courseReadResponseComposite & {
    headers: Headers;
}

export const getCourseReadUrl = (id: number,) => {




    return `/course/${id}/`
}

export const courseRead = async (id: number, options?: RequestInit): Promise<courseReadResponse> => {

    const res = await fetch(getCourseReadUrl(id),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: courseReadResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as courseReadResponse
}



/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
 */
export type courseUpdateResponse200 = {
    data: Course
    status: 200
}

export type courseUpdateResponse400 = {
    data: void
    status: 400
}

export type courseUpdateResponseComposite = courseUpdateResponse200 | courseUpdateResponse400;

export type courseUpdateResponse = courseUpdateResponseComposite & {
    headers: Headers;
}

export const getCourseUpdateUrl = (id: number,) => {




    return `/course/${id}/`
}

export const courseUpdate = async (id: number,
    courseBody: CourseBody, options?: RequestInit): Promise<courseUpdateResponse> => {

    const res = await fetch(getCourseUpdateUrl(id),
        {
            ...options,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                courseBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: courseUpdateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as courseUpdateResponse
}



export type coursePartialUpdateResponse200 = {
    data: Course
    status: 200
}

export type coursePartialUpdateResponseComposite = coursePartialUpdateResponse200;

export type coursePartialUpdateResponse = coursePartialUpdateResponseComposite & {
    headers: Headers;
}

export const getCoursePartialUpdateUrl = (id: number,) => {




    return `/course/${id}/`
}

export const coursePartialUpdate = async (id: number,
    courseBody: CourseBody, options?: RequestInit): Promise<coursePartialUpdateResponse> => {

    const res = await fetch(getCoursePartialUpdateUrl(id),
        {
            ...options,
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                courseBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: coursePartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as coursePartialUpdateResponse
}



/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ ID
 */
export type courseDeleteResponse204 = {
    data: void
    status: 204
}

export type courseDeleteResponse404 = {
    data: void
    status: 404
}

export type courseDeleteResponseComposite = courseDeleteResponse204 | courseDeleteResponse404;

export type courseDeleteResponse = courseDeleteResponseComposite & {
    headers: Headers;
}

export const getCourseDeleteUrl = (id: number,) => {




    return `/course/${id}/`
}

export const courseDelete = async (id: number, options?: RequestInit): Promise<courseDeleteResponse> => {

    const res = await fetch(getCourseDeleteUrl(id),
        {
            ...options,
            method: 'DELETE'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: courseDeleteResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as courseDeleteResponse
}



/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫—É—Ä—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º –≤—ã–¥–∞—á–µ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
 */
export type finalTestSubmitCreateResponse200 = {
    data: FinalTestSubmitCreate200
    status: 200
}

export type finalTestSubmitCreateResponse400 = {
    data: void
    status: 400
}

export type finalTestSubmitCreateResponseComposite = finalTestSubmitCreateResponse200 | finalTestSubmitCreateResponse400;

export type finalTestSubmitCreateResponse = finalTestSubmitCreateResponseComposite & {
    headers: Headers;
}

export const getFinalTestSubmitCreateUrl = () => {




    return `/final-test-submit/`
}

export const finalTestSubmitCreate = async (finalTestSubmitCreateBody: FinalTestSubmitCreateBody, options?: RequestInit): Promise<finalTestSubmitCreateResponse> => {

    const res = await fetch(getFinalTestSubmitCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                finalTestSubmitCreateBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: finalTestSubmitCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as finalTestSubmitCreateResponse
}



/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 */
export type finalTestListResponse200 = {
    data: FinalTest[]
    status: 200
}

export type finalTestListResponse400 = {
    data: void
    status: 400
}

export type finalTestListResponseComposite = finalTestListResponse200 | finalTestListResponse400;

export type finalTestListResponse = finalTestListResponseComposite & {
    headers: Headers;
}

export const getFinalTestListUrl = () => {




    return `/final-test/`
}

export const finalTestList = async (options?: RequestInit): Promise<finalTestListResponse> => {

    const res = await fetch(getFinalTestListUrl(),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: finalTestListResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as finalTestListResponse
}



/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
 */
export type finalTestCreateResponse201 = {
    data: FinalTest
    status: 201
}

export type finalTestCreateResponse400 = {
    data: void
    status: 400
}

export type finalTestCreateResponseComposite = finalTestCreateResponse201 | finalTestCreateResponse400;

export type finalTestCreateResponse = finalTestCreateResponseComposite & {
    headers: Headers;
}

export const getFinalTestCreateUrl = () => {




    return `/final-test/`
}

export const finalTestCreate = async (finalTestBody: FinalTestBody, options?: RequestInit): Promise<finalTestCreateResponse> => {

    const res = await fetch(getFinalTestCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                finalTestBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: finalTestCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as finalTestCreateResponse
}



/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –ø–æ ID
 */
export type finalTestReadResponse200 = {
    data: FinalTest
    status: 200
}

export type finalTestReadResponse404 = {
    data: void
    status: 404
}

export type finalTestReadResponseComposite = finalTestReadResponse200 | finalTestReadResponse404;

export type finalTestReadResponse = finalTestReadResponseComposite & {
    headers: Headers;
}

export const getFinalTestReadUrl = (id: number,) => {




    return `/final-test/${id}/`
}

export const finalTestRead = async (id: number, options?: RequestInit): Promise<finalTestReadResponse> => {

    const res = await fetch(getFinalTestReadUrl(id),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: finalTestReadResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as finalTestReadResponse
}



/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
 */
export type finalTestUpdateResponse200 = {
    data: FinalTest
    status: 200
}

export type finalTestUpdateResponse400 = {
    data: void
    status: 400
}

export type finalTestUpdateResponseComposite = finalTestUpdateResponse200 | finalTestUpdateResponse400;

export type finalTestUpdateResponse = finalTestUpdateResponseComposite & {
    headers: Headers;
}

export const getFinalTestUpdateUrl = (id: number,) => {




    return `/final-test/${id}/`
}

export const finalTestUpdate = async (id: number,
    finalTestBody: FinalTestBody, options?: RequestInit): Promise<finalTestUpdateResponse> => {

    const res = await fetch(getFinalTestUpdateUrl(id),
        {
            ...options,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                finalTestBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: finalTestUpdateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as finalTestUpdateResponse
}



export type finalTestPartialUpdateResponse200 = {
    data: FinalTest
    status: 200
}

export type finalTestPartialUpdateResponseComposite = finalTestPartialUpdateResponse200;

export type finalTestPartialUpdateResponse = finalTestPartialUpdateResponseComposite & {
    headers: Headers;
}

export const getFinalTestPartialUpdateUrl = (id: number,) => {




    return `/final-test/${id}/`
}

export const finalTestPartialUpdate = async (id: number,
    finalTestBody: FinalTestBody, options?: RequestInit): Promise<finalTestPartialUpdateResponse> => {

    const res = await fetch(getFinalTestPartialUpdateUrl(id),
        {
            ...options,
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                finalTestBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: finalTestPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as finalTestPartialUpdateResponse
}



/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ ID
 */
export type finalTestDeleteResponse204 = {
    data: void
    status: 204
}

export type finalTestDeleteResponse404 = {
    data: void
    status: 404
}

export type finalTestDeleteResponseComposite = finalTestDeleteResponse204 | finalTestDeleteResponse404;

export type finalTestDeleteResponse = finalTestDeleteResponseComposite & {
    headers: Headers;
}

export const getFinalTestDeleteUrl = (id: number,) => {




    return `/final-test/${id}/`
}

export const finalTestDelete = async (id: number, options?: RequestInit): Promise<finalTestDeleteResponse> => {

    const res = await fetch(getFinalTestDeleteUrl(id),
        {
            ...options,
            method: 'DELETE'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: finalTestDeleteResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as finalTestDeleteResponse
}



/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç —É—Ä–æ–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
 */
export type lessonTestSubmitCreateResponse200 = {
    data: LessonTestSubmitCreate200
    status: 200
}

export type lessonTestSubmitCreateResponse400 = {
    data: void
    status: 400
}

export type lessonTestSubmitCreateResponseComposite = lessonTestSubmitCreateResponse200 | lessonTestSubmitCreateResponse400;

export type lessonTestSubmitCreateResponse = lessonTestSubmitCreateResponseComposite & {
    headers: Headers;
}

export const getLessonTestSubmitCreateUrl = () => {




    return `/lesson-test-submit/`
}

export const lessonTestSubmitCreate = async (lessonTestSubmitCreateBody: LessonTestSubmitCreateBody, options?: RequestInit): Promise<lessonTestSubmitCreateResponse> => {

    const res = await fetch(getLessonTestSubmitCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                lessonTestSubmitCreateBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonTestSubmitCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonTestSubmitCreateResponse
}



/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫ —É—Ä–æ–∫–∞–º
 */
export type lessonTestListResponse200 = {
    data: LessonTest[]
    status: 200
}

export type lessonTestListResponse400 = {
    data: void
    status: 400
}

export type lessonTestListResponseComposite = lessonTestListResponse200 | lessonTestListResponse400;

export type lessonTestListResponse = lessonTestListResponseComposite & {
    headers: Headers;
}

export const getLessonTestListUrl = () => {




    return `/lesson-test/`
}

export const lessonTestList = async (options?: RequestInit): Promise<lessonTestListResponse> => {

    const res = await fetch(getLessonTestListUrl(),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonTestListResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonTestListResponse
}



/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
 */
export type lessonTestCreateResponse201 = {
    data: LessonTest
    status: 201
}

export type lessonTestCreateResponse400 = {
    data: void
    status: 400
}

export type lessonTestCreateResponseComposite = lessonTestCreateResponse201 | lessonTestCreateResponse400;

export type lessonTestCreateResponse = lessonTestCreateResponseComposite & {
    headers: Headers;
}

export const getLessonTestCreateUrl = () => {




    return `/lesson-test/`
}

export const lessonTestCreate = async (lessonTestBody: LessonTestBody, options?: RequestInit): Promise<lessonTestCreateResponse> => {

    const res = await fetch(getLessonTestCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                lessonTestBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonTestCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonTestCreateResponse
}



/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–µ –ø–æ ID
 */
export type lessonTestReadResponse200 = {
    data: LessonTest
    status: 200
}

export type lessonTestReadResponse404 = {
    data: void
    status: 404
}

export type lessonTestReadResponseComposite = lessonTestReadResponse200 | lessonTestReadResponse404;

export type lessonTestReadResponse = lessonTestReadResponseComposite & {
    headers: Headers;
}

export const getLessonTestReadUrl = (id: number,) => {




    return `/lesson-test/${id}/`
}

export const lessonTestRead = async (id: number, options?: RequestInit): Promise<lessonTestReadResponse> => {

    const res = await fetch(getLessonTestReadUrl(id),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonTestReadResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonTestReadResponse
}



/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
 */
export type lessonTestUpdateResponse200 = {
    data: LessonTest
    status: 200
}

export type lessonTestUpdateResponse400 = {
    data: void
    status: 400
}

export type lessonTestUpdateResponseComposite = lessonTestUpdateResponse200 | lessonTestUpdateResponse400;

export type lessonTestUpdateResponse = lessonTestUpdateResponseComposite & {
    headers: Headers;
}

export const getLessonTestUpdateUrl = (id: number,) => {




    return `/lesson-test/${id}/`
}

export const lessonTestUpdate = async (id: number,
    lessonTestBody: LessonTestBody, options?: RequestInit): Promise<lessonTestUpdateResponse> => {

    const res = await fetch(getLessonTestUpdateUrl(id),
        {
            ...options,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                lessonTestBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonTestUpdateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonTestUpdateResponse
}



export type lessonTestPartialUpdateResponse200 = {
    data: LessonTest
    status: 200
}

export type lessonTestPartialUpdateResponseComposite = lessonTestPartialUpdateResponse200;

export type lessonTestPartialUpdateResponse = lessonTestPartialUpdateResponseComposite & {
    headers: Headers;
}

export const getLessonTestPartialUpdateUrl = (id: number,) => {




    return `/lesson-test/${id}/`
}

export const lessonTestPartialUpdate = async (id: number,
    lessonTestBody: LessonTestBody, options?: RequestInit): Promise<lessonTestPartialUpdateResponse> => {

    const res = await fetch(getLessonTestPartialUpdateUrl(id),
        {
            ...options,
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                lessonTestBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonTestPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonTestPartialUpdateResponse
}



/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ ID
 */
export type lessonTestDeleteResponse204 = {
    data: void
    status: 204
}

export type lessonTestDeleteResponse404 = {
    data: void
    status: 404
}

export type lessonTestDeleteResponseComposite = lessonTestDeleteResponse204 | lessonTestDeleteResponse404;

export type lessonTestDeleteResponse = lessonTestDeleteResponseComposite & {
    headers: Headers;
}

export const getLessonTestDeleteUrl = (id: number,) => {




    return `/lesson-test/${id}/`
}

export const lessonTestDelete = async (id: number, options?: RequestInit): Promise<lessonTestDeleteResponse> => {

    const res = await fetch(getLessonTestDeleteUrl(id),
        {
            ...options,
            method: 'DELETE'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonTestDeleteResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonTestDeleteResponse
}



/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
 */
export type lessonListResponse200 = {
    data: Lesson[]
    status: 200
}

export type lessonListResponse400 = {
    data: void
    status: 400
}

export type lessonListResponseComposite = lessonListResponse200 | lessonListResponse400;

export type lessonListResponse = lessonListResponseComposite & {
    headers: Headers;
}

export const getLessonListUrl = () => {




    return `/lesson/`
}

export const lessonList = async (options?: RequestInit): Promise<lessonListResponse> => {

    const res = await fetch(getLessonListUrl(),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonListResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonListResponse
}



/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
 */
export type lessonCreateResponse201 = {
    data: Lesson
    status: 201
}

export type lessonCreateResponse400 = {
    data: void
    status: 400
}

export type lessonCreateResponseComposite = lessonCreateResponse201 | lessonCreateResponse400;

export type lessonCreateResponse = lessonCreateResponseComposite & {
    headers: Headers;
}

export const getLessonCreateUrl = () => {




    return `/lesson/`
}

export const lessonCreate = async (lessonBody: LessonBody, options?: RequestInit): Promise<lessonCreateResponse> => {

    const res = await fetch(getLessonCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                lessonBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonCreateResponse
}



/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—Ä–æ–∫–µ –ø–æ ID
 */
export type lessonReadResponse200 = {
    data: Lesson
    status: 200
}

export type lessonReadResponse404 = {
    data: void
    status: 404
}

export type lessonReadResponseComposite = lessonReadResponse200 | lessonReadResponse404;

export type lessonReadResponse = lessonReadResponseComposite & {
    headers: Headers;
}

export const getLessonReadUrl = (id: number,) => {




    return `/lesson/${id}/`
}

export const lessonRead = async (id: number, options?: RequestInit): Promise<lessonReadResponse> => {

    const res = await fetch(getLessonReadUrl(id),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonReadResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonReadResponse
}



/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—Ä–æ–∫–µ
 */
export type lessonUpdateResponse200 = {
    data: Lesson
    status: 200
}

export type lessonUpdateResponse400 = {
    data: void
    status: 400
}

export type lessonUpdateResponseComposite = lessonUpdateResponse200 | lessonUpdateResponse400;

export type lessonUpdateResponse = lessonUpdateResponseComposite & {
    headers: Headers;
}

export const getLessonUpdateUrl = (id: number,) => {




    return `/lesson/${id}/`
}

export const lessonUpdate = async (id: number,
    lessonBody: LessonBody, options?: RequestInit): Promise<lessonUpdateResponse> => {

    const res = await fetch(getLessonUpdateUrl(id),
        {
            ...options,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                lessonBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonUpdateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonUpdateResponse
}



export type lessonPartialUpdateResponse200 = {
    data: Lesson
    status: 200
}

export type lessonPartialUpdateResponseComposite = lessonPartialUpdateResponse200;

export type lessonPartialUpdateResponse = lessonPartialUpdateResponseComposite & {
    headers: Headers;
}

export const getLessonPartialUpdateUrl = (id: number,) => {




    return `/lesson/${id}/`
}

export const lessonPartialUpdate = async (id: number,
    lessonBody: LessonBody, options?: RequestInit): Promise<lessonPartialUpdateResponse> => {

    const res = await fetch(getLessonPartialUpdateUrl(id),
        {
            ...options,
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                lessonBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonPartialUpdateResponse
}



/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –ø–æ ID
 */
export type lessonDeleteResponse204 = {
    data: void
    status: 204
}

export type lessonDeleteResponse404 = {
    data: void
    status: 404
}

export type lessonDeleteResponseComposite = lessonDeleteResponse204 | lessonDeleteResponse404;

export type lessonDeleteResponse = lessonDeleteResponseComposite & {
    headers: Headers;
}

export const getLessonDeleteUrl = (id: number,) => {




    return `/lesson/${id}/`
}

export const lessonDelete = async (id: number, options?: RequestInit): Promise<lessonDeleteResponse> => {

    const res = await fetch(getLessonDeleteUrl(id),
        {
            ...options,
            method: 'DELETE'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: lessonDeleteResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as lessonDeleteResponse
}



export type loginCreateResponse201 = {
    data: CustomTokenObtainPair
    status: 201
}

export type loginCreateResponseComposite = loginCreateResponse201;

export type loginCreateResponse = loginCreateResponseComposite & {
    headers: Headers;
}

export const getLoginCreateUrl = () => {




    return `/login/`
}

export const loginCreate = async (customTokenObtainPair: CustomTokenObtainPair, options?: RequestInit): Promise<loginCreateResponse> => {

    const res = await fetch(getLoginCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                customTokenObtainPair,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: loginCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as loginCreateResponse
}



/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
 */
export type paymentListResponse200 = {
    data: Payment[]
    status: 200
}

export type paymentListResponse400 = {
    data: void
    status: 400
}

export type paymentListResponseComposite = paymentListResponse200 | paymentListResponse400;

export type paymentListResponse = paymentListResponseComposite & {
    headers: Headers;
}

export const getPaymentListUrl = () => {




    return `/payment/`
}

export const paymentList = async (options?: RequestInit): Promise<paymentListResponse> => {

    const res = await fetch(getPaymentListUrl(),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: paymentListResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as paymentListResponse
}



/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 */
export type paymentCreateResponse201 = {
    data: Payment
    status: 201
}

export type paymentCreateResponse400 = {
    data: void
    status: 400
}

export type paymentCreateResponseComposite = paymentCreateResponse201 | paymentCreateResponse400;

export type paymentCreateResponse = paymentCreateResponseComposite & {
    headers: Headers;
}

export const getPaymentCreateUrl = () => {




    return `/payment/`
}

export const paymentCreate = async (paymentBody: PaymentBody, options?: RequestInit): Promise<paymentCreateResponse> => {

    const res = await fetch(getPaymentCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                paymentBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: paymentCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as paymentCreateResponse
}



/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID
 */
export type paymentReadResponse200 = {
    data: Payment
    status: 200
}

export type paymentReadResponse404 = {
    data: void
    status: 404
}

export type paymentReadResponseComposite = paymentReadResponse200 | paymentReadResponse404;

export type paymentReadResponse = paymentReadResponseComposite & {
    headers: Headers;
}

export const getPaymentReadUrl = (id: number,) => {




    return `/payment/${id}/`
}

export const paymentRead = async (id: number, options?: RequestInit): Promise<paymentReadResponse> => {

    const res = await fetch(getPaymentReadUrl(id),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: paymentReadResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as paymentReadResponse
}



/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
 */
export type paymentUpdateResponse200 = {
    data: Payment
    status: 200
}

export type paymentUpdateResponse400 = {
    data: void
    status: 400
}

export type paymentUpdateResponseComposite = paymentUpdateResponse200 | paymentUpdateResponse400;

export type paymentUpdateResponse = paymentUpdateResponseComposite & {
    headers: Headers;
}

export const getPaymentUpdateUrl = (id: number,) => {




    return `/payment/${id}/`
}

export const paymentUpdate = async (id: number,
    paymentBody: PaymentBody, options?: RequestInit): Promise<paymentUpdateResponse> => {

    const res = await fetch(getPaymentUpdateUrl(id),
        {
            ...options,
            method: 'PUT',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                paymentBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: paymentUpdateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as paymentUpdateResponse
}



export type paymentPartialUpdateResponse200 = {
    data: Payment
    status: 200
}

export type paymentPartialUpdateResponseComposite = paymentPartialUpdateResponse200;

export type paymentPartialUpdateResponse = paymentPartialUpdateResponseComposite & {
    headers: Headers;
}

export const getPaymentPartialUpdateUrl = (id: number,) => {




    return `/payment/${id}/`
}

export const paymentPartialUpdate = async (id: number,
    paymentBody: PaymentBody, options?: RequestInit): Promise<paymentPartialUpdateResponse> => {

    const res = await fetch(getPaymentPartialUpdateUrl(id),
        {
            ...options,
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                paymentBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: paymentPartialUpdateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as paymentPartialUpdateResponse
}



/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID
 */
export type paymentDeleteResponse204 = {
    data: void
    status: 204
}

export type paymentDeleteResponse404 = {
    data: void
    status: 404
}

export type paymentDeleteResponseComposite = paymentDeleteResponse204 | paymentDeleteResponse404;

export type paymentDeleteResponse = paymentDeleteResponseComposite & {
    headers: Headers;
}

export const getPaymentDeleteUrl = (id: number,) => {




    return `/payment/${id}/`
}

export const paymentDelete = async (id: number, options?: RequestInit): Promise<paymentDeleteResponse> => {

    const res = await fetch(getPaymentDeleteUrl(id),
        {
            ...options,
            method: 'DELETE'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: paymentDeleteResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as paymentDeleteResponse
}



/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –∫—É—Ä—Å.
 */
export type purchaseCourseCreateResponse201 = {
    data: PurchaseCourseCreate201
    status: 201
}

export type purchaseCourseCreateResponse404 = {
    data: void
    status: 404
}

export type purchaseCourseCreateResponseComposite = purchaseCourseCreateResponse201 | purchaseCourseCreateResponse404;

export type purchaseCourseCreateResponse = purchaseCourseCreateResponseComposite & {
    headers: Headers;
}

export const getPurchaseCourseCreateUrl = () => {




    return `/purchase-course/`
}

export const purchaseCourseCreate = async (purchaseCourseCreateBody: PurchaseCourseCreateBody, options?: RequestInit): Promise<purchaseCourseCreateResponse> => {

    const res = await fetch(getPurchaseCourseCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                purchaseCourseCreateBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: purchaseCourseCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as purchaseCourseCreateResponse
}



/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 */
export type sendCodeCreateResponse200 = {
    data: void
    status: 200
}

export type sendCodeCreateResponse400 = {
    data: void
    status: 400
}

export type sendCodeCreateResponseComposite = sendCodeCreateResponse200 | sendCodeCreateResponse400;

export type sendCodeCreateResponse = sendCodeCreateResponseComposite & {
    headers: Headers;
}

export const getSendCodeCreateUrl = () => {




    return `/send-code/`
}

export const sendCodeCreate = async (sendCodeCreateBody: SendCodeCreateBody, options?: RequestInit): Promise<sendCodeCreateResponse> => {

    const res = await fetch(getSendCodeCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                sendCodeCreateBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: sendCodeCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as sendCodeCreateResponse
}



export type userCertificatesListResponse200 = {
    data: Certificate[]
    status: 200
}

export type userCertificatesListResponseComposite = userCertificatesListResponse200;

export type userCertificatesListResponse = userCertificatesListResponseComposite & {
    headers: Headers;
}

export const getUserCertificatesListUrl = () => {




    return `/user-certificates/`
}

export const userCertificatesList = async (options?: RequestInit): Promise<userCertificatesListResponse> => {

    const res = await fetch(getUserCertificatesListUrl(),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: userCertificatesListResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as userCertificatesListResponse
}



export type userCoursesListResponse200 = {
    data: UserCourse[]
    status: 200
}

export type userCoursesListResponseComposite = userCoursesListResponse200;

export type userCoursesListResponse = userCoursesListResponseComposite & {
    headers: Headers;
}

export const getUserCoursesListUrl = () => {




    return `/user-courses/`
}

export const userCoursesList = async (options?: RequestInit): Promise<userCoursesListResponse> => {

    const res = await fetch(getUserCoursesListUrl(),
        {
            ...options,
            method: 'GET'


        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: userCoursesListResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as userCoursesListResponse
}



/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export type verifyCodeCreateResponse201 = {
    data: void
    status: 201
}

export type verifyCodeCreateResponse400 = {
    data: void
    status: 400
}

export type verifyCodeCreateResponseComposite = verifyCodeCreateResponse201 | verifyCodeCreateResponse400;

export type verifyCodeCreateResponse = verifyCodeCreateResponseComposite & {
    headers: Headers;
}

export const getVerifyCodeCreateUrl = () => {




    return `/verify-code/`
}

export const verifyCodeCreate = async (verifyCodeCreateBody: VerifyCodeCreateBody, options?: RequestInit): Promise<verifyCodeCreateResponse> => {

    const res = await fetch(getVerifyCodeCreateUrl(),
        {
            ...options,
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...options?.headers },
            body: JSON.stringify(
                verifyCodeCreateBody,)
        }
    )

    const body = [204, 205, 304].includes(res.status) ? null : await res.text()
    const data: verifyCodeCreateResponse['data'] = body ? JSON.parse(body) : {}

    return { data, status: res.status, headers: res.headers } as verifyCodeCreateResponse
}
